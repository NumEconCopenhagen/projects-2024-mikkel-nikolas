alpha = 1/3
beta = 2/3 

w1A = 0.8
w2A = 0.3
w1B = 1-w1A
w2B = 1-w2A

p2 = 1

utility_A = x1A**alpha*x2A**(1-alpha)
utility_B = x1B**beta*x2B**(1-beta)

demand_A = alpha((p1*w1A+p2*w2A)/p1)
demand_B = (1-alpha)((p1*w1B+p2*w2B)/p2)

x1A, x2A = utility_A(p1)
x1B, x2B = utility_B(p1)

eps1 = x1A-w1A + x1B-(1-w1A)
eps2 = x2A-w2A + x2B-(1-w2A)

import matplotlib.pyplot as plt

# Grid size and setup
N = 75
x_grid = np.linspace(0, 1, N)

# Pareto improvement set
pareto_set = []

# Checking each combination in the grid for Pareto improvements
for xA1 in x_grid:
    for xA2 in x_grid:
        xB1 = 1 - xA1
        xB2 = 1 - xA2
        
        # Calculating utilities for the new allocations
        uA_initial = utility_A(w1A)
        uA_new = utility_A(xA1, xA2)
        uB_new = utility_B(xB1, xB2)
        
        # Checking if both are at least as well off as with their initial endowments
        if uA_new >= uA_initial and uB_new >= uB_initial:
            pareto_set.append((xA1, xA2))

# Extracting the Pareto improvement allocations
pareto_xA1, pareto_xA2 = zip(*pareto_set)

# Plotting the Edgeworth Box with Pareto improvements
plt.figure(figsize=(8, 6))
plt.scatter(pareto_xA1, pareto_xA2, color='blue', label='Pareto Improvements')
plt.title('Edgeworth Box Showing Pareto Improvements')
plt.xlabel('$x_{A1}$')
plt.ylabel('$x_{A2}$')
plt.grid(True)
plt.legend()
plt.show()